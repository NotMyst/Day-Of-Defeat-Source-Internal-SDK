#pragma once

class CHintSystem;
class IRagdoll;

class C_BasePlayer : public C_BaseCombatCharacter
{
public:
	NETVAR(char, m_chAreaBits, "CBasePlayer");
	NETVAR(char, m_chAreaPortalBits, "CBasePlayer");
	NETVAR(int, m_iHideHUD, "CBasePlayer");
	NETVAR(float, m_flFOVRate, "CBasePlayer");
	NETVAR(bool, m_bDucked, "CBasePlayer");
	NETVAR(bool, m_bDucking, "CBasePlayer");
	NETVAR(bool, m_bInDuckJump, "CBasePlayer");
	NETVAR(float, m_flDucktime, "CBasePlayer");
	NETVAR(float, m_flDuckJumpTime, "CBasePlayer");
	NETVAR(float, m_flJumpTime, "CBasePlayer");
	NETVAR(float, m_flFallVelocity, "CBasePlayer");
	NETVAR(Vector, m_vecPunchAngle, "CBasePlayer");
	NETVAR(Vector, m_vecPunchAngleVel, "CBasePlayer");
	NETVAR(bool, m_bDrawViewmodel, "CBasePlayer");
	NETVAR(bool, m_bWearingSuit, "CBasePlayer");
	NETVAR(bool, m_bPoisoned, "CBasePlayer");
	NETVAR(float, m_flStepSize, "CBasePlayer");
	NETVAR(bool, m_bAllowAutoMovement, "CBasePlayer");
	NETVAR_(Vector, m_vecViewOffset, m_vecViewOffset[0], "CBasePlayer");
	NETVAR(float, m_flFriction, "CBasePlayer");
	NETVAR(int, m_iAmmo, "CBasePlayer");
	NETVAR(bool, m_fOnTarget, "CBasePlayer");
	NETVAR(int, m_nTickBase, "CBasePlayer");
	NETVAR(int, m_nNextThinkTick, "CBasePlayer");
	NETVAR(CHandle<C_BaseCombatWeapon>, m_hLastWeapon, "CBasePlayer");
	NETVAR(EHANDLE, m_hGroundEntity, "CBasePlayer");
	NETVAR_(Vector, m_vecVelocity, m_vecVelocity[0], "CBasePlayer");
	NETVAR(Vector, m_vecBaseVelocity, "CBasePlayer");
	NETVAR(EHANDLE, m_hConstraintEntity, "CBasePlayer");
	NETVAR(Vector, m_vecConstraintCenter, "CBasePlayer");
	NETVAR(float, m_flConstraintRadius, "CBasePlayer");
	NETVAR(float, m_flConstraintWidth, "CBasePlayer");
	NETVAR(float, m_flConstraintSpeedFactor, "CBasePlayer");
	NETVAR(float, m_flDeathTime, "CBasePlayer");
	NETVAR(unsigned char, m_nWaterLevel, "CBasePlayer");
	NETVAR(float, m_flLaggedMovementValue, "CBasePlayer");
	NETVAR(bool, deadflag, "CBasePlayer");
	NETVAR(int, m_iFOV, "CBasePlayer");
	NETVAR(int, m_iFOVStart, "CBasePlayer");
	NETVAR(float, m_flFOVTime, "CBasePlayer");
	NETVAR(int, m_iDefaultFOV, "CBasePlayer");
	NETVAR(EHANDLE, m_hZoomOwner, "CBasePlayer");
	NETVAR(EHANDLE, m_hVehicle, "CBasePlayer");
	NETVAR(EHANDLE, m_hUseEntity, "CBasePlayer");
	NETVAR(int, m_iHealth, "CBasePlayer");
	NETVAR(char, m_lifeState, "CBasePlayer");
	NETVAR(int, m_iBonusProgress, "CBasePlayer");
	NETVAR(int, m_iBonusChallenge, "CBasePlayer");
	NETVAR(float, m_flMaxspeed, "CBasePlayer");
	NETVAR(int, m_fFlags, "CBasePlayer");
	NETVAR(int, m_iObserverMode, "CBasePlayer");
	NETVAR(EHANDLE, m_hObserverTarget, "CBasePlayer");
	NETVAR(CHandle<C_BaseViewModel>, m_hViewModel, "CBasePlayer");
	NETVAR(const char*, m_szLastPlaceName, "CBasePlayer");

public:
	virtual void SharedSpawn() = 0;
	virtual bool GetSteamID(CSteamID* pID) = 0;
	virtual float GetPlayerMaxSpeed() = 0;
	virtual void CalcView(Vector& eyeOrigin, QAngle& eyeAngles, float& zNear, float& zFar, float& fov) = 0;
	virtual void CalcViewModelView(const Vector& eyeOrigin, const QAngle& eyeAngles) = 0;
	virtual float CalcRoll(const QAngle& angles, const Vector& velocity, float rollangle, float rollspeed) = 0;
	virtual void SetPlayerUnderwater(bool state) = 0;
	virtual Vector Weapon_ShootPosition() = 0;
	virtual void Weapon_DropPrimary(void) = 0;
	virtual Vector GetAutoaimVector(float flScale) = 0;
	virtual bool CreateMove(float flInputSampleTime, CUserCmd* pCmd) = 0;
	virtual void AvoidPhysicsProps(CUserCmd* pCmd) = 0;
	virtual void PlayerUse(void) = 0;
	virtual bool IsUseableEntity(C_BaseEntity* pEntity, unsigned int requiredCaps) = 0;
	virtual int GetObserverMode() const = 0;
	virtual C_BaseEntity* GetObserverTarget() const = 0;
	virtual IRagdoll* GetRepresentativeRagdoll() const = 0;
	virtual void TeamChange(int iNewTeam) = 0;
	virtual bool IsAllowedToSwitchWeapons(void) = 0;
	virtual C_BaseCombatWeapon* GetActiveWeaponForSelection(void) = 0;
	virtual C_BaseAnimating* GetRenderedWeaponModel() = 0;
	virtual bool IsOverridingViewmodel(void) = 0;
	virtual int	DrawOverriddenViewmodel(C_BaseViewModel* pViewmodel, int flags) = 0;
	virtual float GetDefaultAnimSpeed(void) = 0;
	virtual void ThirdPersonSwitch(bool bThirdperson) = 0;
	virtual bool CanSetSoundMixer(void) = 0;
	virtual int GetVisionFilterFlags(bool bWeaponsCheck = false) = 0;
	virtual void CalculateVisionUsingCurrentFlags(void) = 0;
	virtual bool ViewModel_IsTransparent(void) = 0;
	virtual bool ViewModel_IsUsingFBTexture(void) = 0;
	virtual void PreThink(void) = 0;
	virtual void PostThink(void) = 0;
	virtual void ItemPreFrame(void) = 0;
	virtual void ItemPostFrame(void) = 0;
	virtual void AbortReload(void) = 0;
	virtual void SelectLastItem(void) = 0;
	virtual void Weapon_SetLast(C_BaseCombatWeapon* pWeapon) = 0;
	virtual bool Weapon_ShouldSetLast(C_BaseCombatWeapon* pOldWeapon, C_BaseCombatWeapon* pNewWeapon) = 0;
	virtual bool Weapon_ShouldSelectItem(C_BaseCombatWeapon* pWeapon) = 0;
	virtual C_BaseCombatWeapon* GetLastWeapon(void) = 0;
	virtual void SelectItem(const char* pstr, int iSubType = 0) = 0;
	virtual void UpdateClientData(void) = 0;
	virtual float GetFOV(void) = 0;
	virtual bool IsZoomed(void) = 0;
	virtual void ViewPunch(const QAngle& angleOffset) = 0;
	virtual void OverrideView(CViewSetup* pSetup) = 0;
	virtual const Vector GetPlayerMins(void) const = 0;
	virtual const Vector GetPlayerMaxs(void) const = 0;
	virtual void SetVehicleRole(int nRole) = 0;
	virtual void SetAnimation(PLAYER_ANIM playerAnim) = 0;
	virtual float GetMinFOV() const = 0;
	virtual void PlayPlayerJingle() = 0;
	virtual void UpdateStepSound(surfacedata_t* psurface, const Vector& vecOrigin, const Vector& vecVelocity) = 0;
	virtual void PlayStepSound(Vector& vecOrigin, surfacedata_t* psurface, float fvol, bool force) = 0;
	virtual surfacedata_t* GetFootstepSurface(const Vector& origin, const char* surfaceName) = 0;
	virtual void GetStepSoundVelocities(float* velwalk, float* velrun) = 0;
	virtual void SetStepSoundTime(stepsoundtimes_t iStepSoundTime, bool bWalking) = 0;
	virtual const char* GetOverrideStepSound(const char* pszBaseStepSoundName) = 0;
	virtual void OnEmitFootstepSound(const CSoundParameters& params, const Vector& vecOrigin, float fVolume) = 0;
	virtual void ExitLadder() = 0;
	virtual CHintSystem* Hints(void) = 0;
	virtual	IMaterial* GetHeadLabelMaterial(void) = 0;
	virtual void OnAchievementAchieved(int iAchievement) = 0;
	virtual bool CanUseFirstPersonCommand(void) = 0;
	virtual void CalcObserverView(Vector& eyeOrigin, QAngle& eyeAngles, float& fov) = 0;
	virtual Vector GetChaseCamViewOffset(C_BaseEntity* target) = 0;
	virtual void CalcInEyeCamView(Vector& eyeOrigin, QAngle& eyeAngles, float& fov) = 0;
	virtual float GetDeathCamInterpolationTime() = 0;
	virtual void CalcDeathCamView(Vector& eyeOrigin, QAngle& eyeAngles, float& fov) = 0;
	virtual void CalcFreezeCamView(Vector& eyeOrigin, QAngle& eyeAngles, float& fov) = 0;
	virtual void SetLocalViewAngles(const QAngle& viewAngles) = 0;
	virtual void SetViewAngles(const QAngle& ang) = 0;
	virtual bool IsDucked(void) const = 0;
	virtual bool IsDucking(void) const = 0;
	virtual float GetFallVelocity(void) = 0;
};